# Задание 2

def task_1():
    # Создать список и заполнить его элементами различных типов данных.
    # Реализовать скрипт проверки типа данных каждого элемента.
    # Использовать функцию type() для проверки типа.
    # Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
    my_list = ["Name", "Surname", 23.68, 1999, "City", None, [1, 2, 3], ('x', 'y', 'z')]
    print(my_list)
    for indx in my_list:
        print(f"{indx} has type {type(indx)}")


def task_2():
    # Для списка реализовать обмен значений соседних элементов, т.е.
    # Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
    # При нечетном количестве элементов последний сохранить на своем месте.
    # Для заполнения списка элементов необходимо использовать функцию input().
    new_list = []
    my_list = input("Введите список значений через пробел ").split(sep=" ")
    new_list.extend(my_list)
    print(f"Primary list is {new_list}")
    # i - итератор для счетчика цикла while
    i = 0
    # red - получение длины списка. Если длина нечетная - отбрасывается последний элемент из цикла,
    # иначе вылетит ошибка в итераторах получения элементов i+1
    # *backlog - переписать условие
    red = len(new_list) - len(new_list) % 2
    while i < red:
        new_list[i], new_list[i + 1] = new_list[i + 1], new_list[i]
        i = i + 2
    print(f"Result  list is {new_list}")


def task_3():
    # Пользователь вводит месяц в виде целого числа от 1 до 12.
    # Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
    # Напишите решения через list и через dict.

    my_list = (
        "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь",
        "Декабрь")
    my_dist = {0: "Зима", 1: "Весна", 2: "Лето", 3: "Осень", 4: "Зима"}
    while True:
        month = int(input("Введите номер месяца "))
        if month < 13:
            break
        else:
            print("Номер месяца неверен")
    season = my_dist.get(month // 3)
    print(f"  Месяц {my_list[month - 1]} - это {season}")


def task_4():
    # Пользователь вводит строку из нескольких слов, разделённых пробелами.
    # Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
    # Если в слово длинное, выводить только первые 10 букв в слове.

    my_list = input("Введите список значений через пробел ").split(sep=" ")
    print(my_list)
    for indx in my_list:
        print(my_list.index(indx) + 1, ": ", indx[0:10])


def task_5():
    # Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
    # У пользователя необходимо запрашивать новый элемент рейтинга.
    # Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент
    # с тем же значением должен разместиться после них.
    # Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
    # Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
    # Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
    # Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
    #
    # Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

    new_list = [7, 6, 6, 5, 3, 3, 2]
    while True:
        new_item = int(input("Введите новое значение "))
        if new_item == 0:
            print("Ввод окончен")
            break
        new_list.append(new_item)
        new_list.sort(reverse=True)
        print(f"Новый список {new_list}")


def task_6():
    # *Реализовать структуру данных «Товары».
    # Она должна представлять собой список кортежей.
    # Каждый кортеж хранит информацию об отдельном товаре.
    # В кортеже должно быть два элемента — номер товара и словарь с параметрами
    # (характеристиками товара: название, цена, количество, единица измерения).
    # Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
    # Пример готовой структуры:
    # [
    #     (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
    #     (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
    #     (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
    # ]
    # Необходимо собрать аналитику о товарах. Реализовать словарь,
    # в котором каждый ключ — характеристика товара, например название,
    # а значение — список значений-характеристик, например список названий товаров.
    # Пример:
    # {
    # “название”: [“компьютер”, “принтер”, “сканер”],
    # “цена”: [20000, 6000, 2000],
    # “количество”: [5, 2, 7],
    # “ед”: [“шт.”]
    # }
    const_list = ["Название", "Цена", "Количество", "ед"]
    cort_list = []
    numlines = int(input("Сколько товаров вводить? "))
    i = 0
    while i < numlines:
        new_line = (input("Введите данные о товаре: Название, цена, количество., ед ").split(sep=" "))
        my_dist = dict(zip(const_list, new_line))
        my_tulpe = (i + 1, my_dist)
        cort_list.append(my_tulpe)
        i = i + 1
    # выводим полученный список
    print("Сформированный список:")
    for itr in cort_list:
        print(itr)
    y = 0  # итератор для цикла while
    new_list = []
    # формируем словарь с уникальными характеристиками
    while y < len(const_list):
        add_list = []
        for t in cort_list:
            add_list.append(t[1].get(const_list[y]))
        y = y + 1
        add_list = list(set(add_list))
        new_list.append(add_list)
    new_dist = dict(zip(const_list, new_list))
    print("Полученные уникальные характеристики:")
    for itr in new_dist:
        print(f"{itr}: {new_dist.get(itr)}")


task_1()
task_2()
task_3()
task_4()
task_5()
task_6()
